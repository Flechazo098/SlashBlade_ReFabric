plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url = "https://mvn.devos.one/releases/" }
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	maven {
		url = "https://api.modrinth.com/maven"
	}
	maven {
		name = "Greenhouse Maven"
		url = 'https://repo.greenhouse.house/releases/'
	}
	maven {
		url "https://jitpack.io/" // Fabric ASM
		content {
			excludeGroup "io.github.fabricators_of_create"
		}
	}
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		name "KosmX's maven"
		url 'https://maven.kosmx.dev/'
	}
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven {
		name = "FLMaven"
		url = "https://raw.githubusercontent.com/Flechazo098/FLMaven/main/repository"
	}
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
	include modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_anim}")

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:common:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:items:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:fluids:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:extensions:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tags:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:recipe_book_categories:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:entity:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tool_actions:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:transfer:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:registries:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:lazy_registration:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:data:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_builders:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_generators:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_loader:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_materials:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:models:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:networking:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:utility:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:base:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:blocks:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:client_events:${port_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:level_events:${port_version}"))

	// compile against the JEI API but do not include it at runtime
	modCompileOnly(("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
	modCompileOnly(("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}"))
	// at runtime, use the full JEI jar for Forge
	modRuntimeOnly(("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"))

	// Replace modImplementation with modApi if you expose components in your own API
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-api:${project.cca_version}"
	// Copy the following only if you want to bundle Cardinal Components API as a Jar-in-Jar dependency
	// (otherwise, you should configure the dependency on Modrinth/Curseforge)
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-api:${project.cca_version}"

	modImplementation "curse.maven:the-twilight-forest-unofficial-1111023:6010673"
	implementation("com.google.errorprone:error_prone_annotations:2.37.0")

	modApi("me.shedaniel.cloth:cloth-config-fabric:11.1.136") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation ("com.flechazo:jzxlib:0.0.1")
}

loom {
	accessWidenerPath = file("src/main/resources/slashbladere.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}